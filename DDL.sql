-- MySQL Script generated by MySQL Workbench for creation of tables
-- 

-- Store old preferences for checks and modes to restore after query execution
SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Create Table `Patients`
-- -----------------------------------------------------
-- Replace table if it exists
DROP TABLE IF EXISTS `Patients` ;
CREATE TABLE IF NOT EXISTS `Patients` (
  `patient_id` INT NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(45) NOT NULL,
  `date_of_birth` DATE NOT NULL,
  `email` VARCHAR(45) NOT NULL,
  -- Phone number as varchar to allow dashes between area codes and other sections of number
  `phone_number` VARCHAR(15) NOT NULL,
  PRIMARY KEY (`patient_id`),
  -- Ensure patient_id is unique across all records and is visible in query metadata
  UNIQUE INDEX `PatientID_UNIQUE` (`patient_id` ASC) VISIBLE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Create Table `Departments`
-- -----------------------------------------------------
-- Replace table if it exists
DROP TABLE IF EXISTS `Departments` ;
CREATE TABLE IF NOT EXISTS `Departments` (
  `department_id` INT NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`department_id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Employees`
-- -----------------------------------------------------
-- Replace table if it exists
DROP TABLE IF EXISTS `Employees` ;
CREATE TABLE IF NOT EXISTS `Employees` (
  `employee_id` INT NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(45) NOT NULL,
  `role` VARCHAR(45) NOT NULL,
  -- Allow for department to be NULLable FK relationship
  `Departments_department_id` INT,
  PRIMARY KEY (`employee_id`),
  -- create index for metadata queries and helps join queries execute faster
  INDEX `fk_Employees_Departments1_idx` (`Departments_department_id` ASC) VISIBLE,
  -- constraint ensures link between Departments_department_id in Employee table and department_id from Departments ID is established
  CONSTRAINT `fk_Employees_Departments1`
    FOREIGN KEY (`Departments_department_id`)
    REFERENCES `Departments` (`department_id`)
    -- If a row is deleted in Department table, don't delete any rows in Employee table 
    ON DELETE No ACTION 
    -- If a row is changed/updated in Department table, update corresponding values in Employee table
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Procedures`
-- -----------------------------------------------------
-- Replace table if it exists
DROP TABLE IF EXISTS `Procedures` ;
CREATE TABLE IF NOT EXISTS `Procedures` (
  `procedure_name` VARCHAR(45) NOT NULL,
  `duration` INT NOT NULL,
  `required_role` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`procedure_name`),
  -- Ensure procedure_name is unique across all records and is visible in query metadata
  UNIQUE INDEX `procedure_name_UNIQUE` (`procedure_name` ASC) VISIBLE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Schedules`
-- -----------------------------------------------------
-- Replace table if it exists
DROP TABLE IF EXISTS `Schedules` ;
CREATE TABLE IF NOT EXISTS `Schedules` (
  `slot_id` INT NOT NULL AUTO_INCREMENT,
  `date` DATETIME NOT NULL,
  `time_slot` INT NOT NULL,
  `Procedures_procedure_name` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`slot_id`),
  -- Ensure slot_id is unique across all records and is visible in query metadata
  UNIQUE INDEX `slot_id_UNIQUE` (`slot_id` ASC) VISIBLE,
  INDEX `fk_Schedule_Procedures1_idx` (`Procedures_procedure_name` ASC) VISIBLE,
  -- constraint ensures link between Procedures_procedure_name in `Schedules` table and procedure_name in `Procedures` table is established
  CONSTRAINT `fk_Schedule_Procedures1`
    FOREIGN KEY (`Procedures_procedure_name`)
    REFERENCES `Procedures` (`procedure_name`)
    -- If a row is deleted in `Procedures` table, delete all corresponding rows in `Employee` table 
    ON DELETE CASCADE 
    -- If a row is changed/updated in `Procedure` table, update corresponding values in `Schedules` table
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Employees_has_Schedule`. 
--This table is bridge or intermediate table, alows for 
--many to many relationship between schedule and Employee. 
-- -----------------------------------------------------
-- Replace table if it exists
DROP TABLE IF EXISTS `Employees_has_Schedule` ;
CREATE TABLE IF NOT EXISTS `Employees_has_Schedule` (
  `Employees_employee_id` INT NOT NULL,
  `Schedule_slot_id` INT NOT NULL,
  PRIMARY KEY (`Employees_employee_id`, `Schedule_slot_id`),
  -- Making visible in query metadata to increase efficiency of joins
  INDEX `fk_Employees_has_Schedule_Schedule1_idx` (`Schedule_slot_id` ASC) VISIBLE,
  -- Making visible in query metadata to increase efficiency of joins
  INDEX `fk_Employees_has_Schedule_Employees1_idx` (`Employees_employee_id` ASC) VISIBLE,
  -- constraint ensures link between Employees_employee_id in `Employees_has_Schedule` table and employee_id in `Employees` table is established
  CONSTRAINT `fk_Employees_has_Schedule_Employees1`
    FOREIGN KEY (`Employees_employee_id`)
    REFERENCES `Employees` (`employee_id`)
    -- If a row is deleted in `Employees` table, delete all corresponding rows in `Employees_has_Schedule` table 
    ON DELETE CASCADE
    -- If a row is changed/updated in `Employee` table, update corresponding values in `Employee_has_Schedule` table
    ON UPDATE CASCADE,
  -- constraint ensures link between Schedule_slot_id in `Employees_has_Schedule` table and slot_id in `Schedules` table is established
  CONSTRAINT `fk_Employees_has_Schedule_Schedule1`
    FOREIGN KEY (`Schedule_slot_id`)
    REFERENCES `Schedules` (`slot_id`)
    -- If a row is deleted in `Schedules` table, delete all corresponding rows in `Employees_has_Schedule` table 
    ON DELETE CASCADE 
    -- If a row is changed/updated in `Schedules` table, update corresponding values in `Employee_has_Schedule` table
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Patients_has_Schedule`
-- -----------------------------------------------------
-- Replace table if it exists
DROP TABLE IF EXISTS `Patients_has_Schedule` ;
CREATE TABLE IF NOT EXISTS `Patients_has_Schedule` (
  `Patients_patient_id` INT NOT NULL,
  `Schedule_slot_id` INT NOT NULL,
  PRIMARY KEY (`Patients_patient_id`, `Schedule_slot_id`),
  -- Making visible in query metadata to increase efficiency of joins
  INDEX `fk_Patients_has_Schedule_Schedule1_idx` (`Schedule_slot_id` ASC) VISIBLE,
  -- Making visible in query metadata to increase efficiency of joins
  INDEX `fk_Patients_has_Schedule_Patients1_idx` (`Patients_patient_id` ASC) VISIBLE,
  -- constraint ensures link between Patients_patient_id in `Patients_has_Schedule` table and patient_id in `Patients` table is established
  CONSTRAINT `fk_Patients_has_Schedule_Patients1`
    FOREIGN KEY (`Patients_patient_id`)
    REFERENCES `Patients` (`patient_id`)
    -- If a row is deleted in `Patients` table, delete all corresponding rows in `Patients_has_Schedule` table 
    ON DELETE CASCADE 
    -- If a row is changed/updated in `Patients` table, update corresponding values in `Patients_has_Schedule` table
    ON UPDATE CASCADE,
  -- constraint ensures link between Schedule_slot_id in `Patients_has_Schedule` table and slot_id in `Schedules` table is established
  CONSTRAINT `fk_Patients_has_Schedule_Schedule1`
    FOREIGN KEY (`Schedule_slot_id`)
    REFERENCES `Schedules` (`slot_id`)
    -- If a row is deleted in `Schedules` table, delete all corresponding rows in `Patients_has_Schedule` table 
    ON DELETE CASCADE 
    -- If a row is changed/updated in `Schedules` table, update corresponding values in `Patients_has_Schedule` table
    ON UPDATE CASCADE)
ENGINE = InnoDB;

-- --------------BEGIN INSERTING DATA INTO CREATED TABLES--------------------------------------

Insert into `Patients`(
  name, 
  date_of_birth,
  email,
  phone_number
)VALUES(
  'Bob Smith',
  '1985-03-02',
  'bob.smith@gmail.com',
  '123-234-3456'
),
(
  'Chris Clark',
  '1981-02-03',
  'clarkchris@gmail.com',
  '234-345-4567'
),
(
  'Joan Hill',
  '1981-09-10',
  'bob.smith@gmail.com',
  '161-345-2534'
),
(
  'Paul Roberts',
  '1976-05-06',
  'roberts.paul@gmail.com',
  '090-465-2843'
),
(
  'Michael Scott',
  '1991-08-17',
  'scott.michael@gmail.com',
  '360-295-4814'
);

INSERT INTO Departments(
  name
)VALUES
  ('Surgical'),
  ('Family Practice'),
  ('OBGYN'),
  ('Internal Medicine'),
  ('Orthopedics');


INSERT INTO Employees(
  name,
  role,
  Departments_department_id
)VALUES(
  'Mark Hill',
  'Doctor',
  (SELECT department_id FROM Departments WHERE name="Surgical")
),
(
  'Donna Wilson',
  'Nurse',
  (SELECT department_id FROM Departments WHERE name="Surgical")
),
(
  'Maria Moor',
  'Medical Assistant',
  (SELECT department_id FROM Departments WHERE name="Family Practice")
),
(
  'David Phillips',
  'Doctor',
  (SELECT department_id FROM Departments WHERE name="Internal Medicine")
),
(
  'Barbara Miller',
  'Doctor',
  (SELECT department_id FROM Departments WHERE name="OBGYN")
);

INSERT INTO Procedures(
  procedure_name,
  duration,
  required_role
)VALUES(
  'Wellness Check',
  30,
  'Doctor'
),
(
  'Suture Removal',
  10,
  'Nurse'
),
(
  'Post-surgery Follow Up',
  30,
  'Doctor'
),
(
  'Women\'s Health Exam',
  60,
  'Doctor'
),
(
  'Ear Irrigation',
  20,
  'Medical Assistant'
);

-- Schdules to patient and employee is M:M, first create entry in schedule, then popluate intermediate tables with corresponding foreign keys.
-- This is done for each entry seperately to grab the last slot_id created from the Schedules row entry
-- Entry 1 for schedules, Patient_has_schedule and Employee_has_Schedule
INSERT INTO Schedules(
  date,
  time_slot,
  Procedures_procedure_name
)VALUES(
  '2023-08-10 08:00:00',
  30,
  "Wellness Check"
);
SET @last_schedule_ID = LAST_INSERT_ID();
INSERT INTO Patients_has_Schedule(
  Patients_patient_id,
  Schedule_slot_id
)VALUES(
  1,
  @last_schedule_ID
);
INSERT INTO Employees_has_Schedule(
  Employees_employee_id,
  Schedule_slot_id
)VALUES(
  4,
  @last_schedule_ID
);

-- Entry 2 for Schedules entity
INSERT INTO Schedules(
  date,
  time_slot,
  Procedures_procedure_name
)VALUES(
  '2023-08-10 09:00:00',
  60,
  'Women\'s Health Exam'
);
SET @last_schedule_ID = LAST_INSERT_ID();
INSERT INTO Patients_has_Schedule(
  Patients_patient_id,
  Schedule_slot_id
)VALUES(
  3,
  @last_schedule_ID
);
INSERT INTO Employees_has_Schedule(
  Employees_employee_id,
  Schedule_slot_id
)VALUES(
  5,
  @last_schedule_ID
);

-- Entry 3 for Schedules entity
INSERT INTO Schedules(
  date,
  time_slot,
  Procedures_procedure_name
)VALUES(
  '2023-08-11 08:30:00',
  20,
  'Suture Removal'
);
SET @last_schedule_ID = LAST_INSERT_ID();
INSERT INTO Patients_has_Schedule(
  Patients_patient_id,
  Schedule_slot_id
)VALUES(
  4,
  @last_schedule_ID
);
INSERT INTO Employees_has_Schedule(
  Employees_employee_id,
  Schedule_slot_id
)VALUES(
  2,
  @last_schedule_ID
);


-- Entry 4 for Schedules entity
INSERT INTO Schedules(
  date,
  time_slot,
  Procedures_procedure_name
)VALUES(
  '2023-08-12 12:00:00',
  30,
  'Ear Irrigation'
);
SET @last_schedule_ID = LAST_INSERT_ID();
INSERT INTO Patients_has_Schedule(
  Patients_patient_id,
  Schedule_slot_id
)VALUES(
  2,
  @last_schedule_ID
);
INSERT INTO Employees_has_Schedule(
  Employees_employee_id,
  Schedule_slot_id
)VALUES(
  3,
  @last_schedule_ID
);

-- Entry 5 for Schedules entity
INSERT INTO Schedules(
  date,
  time_slot,
  Procedures_procedure_name
)VALUES(
  '2023-08-13 09:00:00',
  30,
  'Post-surgery Follow Up'
);
SET @last_schedule_ID = LAST_INSERT_ID();
INSERT INTO Patients_has_Schedule(
  Patients_patient_id,
  Schedule_slot_id
)VALUES(
  5,
  @last_schedule_ID
);
INSERT INTO Employees_has_Schedule(
  Employees_employee_id,
  Schedule_slot_id
)VALUES(
  1,
  @last_schedule_ID
);

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
